"use strict";(self.webpackChunkwpplugin_docs_servebolt_com=self.webpackChunkwpplugin_docs_servebolt_com||[]).push([[193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),_=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=_(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=_(n),c=r,h=m["".concat(p,".").concat(c)]||m[c]||s[c]||i;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var _=2;_<i;_++)l[_]=n[_];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1764:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>_});var a=n(3117),r=(n(7294),n(3905));const i={sidebar_position:3,title:"Actions, Filters and PHP constants"},l=void 0,o={unversionedId:"actions-filters-and-php-constants",id:"actions-filters-and-php-constants",title:"Actions, Filters and PHP constants",description:"The Servebolt Optimizer plugin and its behavior can be altered by using filters and PHP constants.",source:"@site/docs/actions-filters-and-php-constants.md",sourceDirName:".",slug:"/actions-filters-and-php-constants",permalink:"/docs/actions-filters-and-php-constants",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Actions, Filters and PHP constants"},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/docs/getting-started"},next:{title:"Changelog",permalink:"/docs/changelog"}},p={},_=[{value:"Usage and examples",id:"usage-and-examples",level:3},{value:"PHP constants",id:"php-constants",level:3},{value:"Actions",id:"actions",level:3},{value:"Filters",id:"filters",level:3}],u={toc:_};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://servebolt.com/help/feature/wordpress-hosting/servebolt-optimizer/"},"Servebolt Optimizer")," plugin and its behavior can be altered by using filters and PHP constants."),(0,r.kt)("h3",{id:"usage-and-examples"},"Usage and examples"),(0,r.kt)("p",null,"The concept of using filters and PHP constants are very similar \u2013 they are used to change values and behaviors. But they do have their differences. Please see below for an example of their difference."),(0,r.kt)("p",null,"PHP constants are useful for specifying a single value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"define( 'SERVEBOLT_FPC_CACHE_TIME', 1200 ); // Set HTML Cache time to 20 minutes\ndefine( 'SB_CF_REQUEST_DEBUG', true ); // Debug requests to the Cloudflare API\n")),(0,r.kt)("p",null,"Filters are useful if you would like to write some logic as well as changing a value:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"add_filter( 'sb_optimizer_display_admin_bar_menu_by_user_capabilities', function( $display_admin_bar ) {\n    if ( ! current_user_can( 'my_custom_capability' ) ) {\n        return false;\n    }\n    return $display_admin_bar;\n});\n")),(0,r.kt)("p",null,"Read more about filters in the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.wordpress.org/plugins/hooks/filters/"},"WordPress documentation"),"."),(0,r.kt)("p",null,"There are also some built in functions that are handy when working with filters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_zero")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_empty_array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"__return_empty_string"))),(0,r.kt)("p",null,"An example of this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"add_filter( 'sb_optimizer_automatic_purge_on_post_save', '__return_true' );\nadd_filter( 'sb_optimizer_max_number_of_urls_to_be_purged', '__return_zero' );\n")),(0,r.kt)("p",null,"Actions on the other hans are used to trigger a piece of code on a specific time, for example right after a checkout in a web store. This is useful if you want to integrate with WordPress or 3rd parties like WordPress-plugins."),(0,r.kt)("p",null,"Read more about filters in the ",(0,r.kt)("a",{parentName:"p",href:"https://developer.wordpress.org/plugins/hooks/actions/"},"WordPress documentation"),"."),(0,r.kt)("h3",{id:"php-constants"},"PHP constants"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"SERVEBOLT_FPC_CACHE_TIME (integer)\n")),(0,r.kt)("p",null,"Used to set the \u201cExpires\u201d-header. Defaults to 600 seconds. Only active for Servebolt-customers when using HTML caching."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SERVEBOLT_BROWSER_CACHE_TIME (integer)")),(0,r.kt)("p",null,"Used to set the \u201cmax-age\u201d-parameter in the \u201cCache-Control\u201d-header. Defaults to 600 seconds. Only active for Servebolt-customers when using HTML caching."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SB_CF_REQUEST_DEBUG (boolean)")),(0,r.kt)("p",null,"Whether to debug Cloudflare API request data to the error log."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SERVEBOLT_QUEUE_BASED_CACHE_PURGE (boolean)")),(0,r.kt)("p",null,"Whether to use the WP cron to purge the cache (the alternative is that the cache purge happens immediately, without any queue)."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SERVEBOLT_QUEUE_BASED_CACHE_PURGE_SHOULD_PARSE_QUEUE (boolean)")),(0,r.kt)("p",null,"Whether to execute cache purge on items in the queue. Can be used to only queue up items for cache purge, but not execute the cache purge."),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("p",null,"Under you will find a full list of all available actions in the plugin and when they will fire:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_env_file_reader_failure")),(0,r.kt)("p",null,"Runs when the plugin could not read the environment file (Servebolt clients only). In most cases this is because the files has been deleted or they have been disabled in the Servebolt Control Panel."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_env_file_reader_failure', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_upgrader_process_complete")),(0,r.kt)("p",null,"Runs when after the plugin has been updated, regardless if it's done through WP Admin or WP CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_upgrader_process_complete', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fpc_no_cache_headers")),(0,r.kt)("p",null,"Runs when no cache headers are being set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_fpc_no_cache_headers', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fpc_cache_headers")),(0,r.kt)("p",null,"Runs when cache headers are being set."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_fpc_cache_headers', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_html_cache_enable")),(0,r.kt)("p",null,"Runs when HTML cache is enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_html_cache_enable', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_html_cache_disable")),(0,r.kt)("p",null,"Runs when HTML cache is disabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_html_cache_disable', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_enable")),(0,r.kt)("p",null,"Runs when Accelerated Domains is enabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_acd_enable', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_disable")),(0,r.kt)("p",null,"Runs when Accelerated Domains is disabled."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_acd_disable', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_prefetching_manifest_files_written")),(0,r.kt)("p",null,"Runs when manifest files are being written to disk for the Prefetching feature (Accelerated Domains-users only)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function action_callback() {\n    // Do something\n}\nadd_action( 'sb_optimizer_prefetching_manifest_files_written', 'action_callback', 10, 0 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_post_removed_from_html_cache_exclusion")),(0,r.kt)("p",null,"Runs when a post is removed from HTML cache exclusion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being removed from the HTML cache exclusion list.\n */\nfunction action_callback( $postId ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_post_removed_from_html_cache_exclusion', 'action_callback', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_post_added_to_html_cache_exclusion")),(0,r.kt)("p",null,"Runs when a post is added to HTML cache exclusion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being added to the HTML cache exclusion list.\n */\nfunction action_callback( $postId ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_post_added_to_html_cache_exclusion', 'action_callback', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_3rd_party_urls")),(0,r.kt)("p",null,"Runs when an object gets purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being purged cache for.\n * @param object $purgeObjectType An instance of Servebolt\\Optimizer\\CachePurge\\PurgeObject\\ObjectTypes\\Post.\n */\nfunction action_callback( $postId, $purgeObjectType ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_cache_purge_3rd_party_urls', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_post_cache_purge_3rd_party_urls")),(0,r.kt)("p",null,"Runs when a post gets purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being purged cache for.\n * @param object $purgeObjectType An instance of Servebolt\\Optimizer\\CachePurge\\PurgeObject\\ObjectTypes\\Post.\n */\nfunction action_callback( $postId, $purgeObjectType ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_post_cache_purge_3rd_party_urls', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_post_cache_purge_3rd_party_urls_post_type_{post_type}")),(0,r.kt)("p",null,"Runs when a post in a specific post type gets purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being purged cache for.\n * @param object $purgeObjectType An instance of Servebolt\\Optimizer\\CachePurge\\PurgeObject\\ObjectTypes\\Post.\n */\nfunction action_callback( $postId, $purgeObjectType ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_post_cache_purge_3rd_party_urls_post_type_{post_type}', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_purged_post_cache")),(0,r.kt)("p",null,"Runs right before cache is being purged for a post."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $postId The ID of the post being purged cache for.\n * @param bool $isSimplePurge If true then only the URL of the post is being purged, not other related URLs (archive pages etc.)\n */\nfunction action_callback( $postId, $isSimplePurge ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_purged_post_cache', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_purged_post_cache_for_{postId}")),(0,r.kt)("p",null,"Runs right before cache is being purged for a post."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $isSimplePurge If true then only the URL of the post is being purged, not other related URLs (archive pages etc.)\n */\nfunction action_callback( $isSimplePurge ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_purged_post_cache_for_{postId}', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_term_cache_purge_3rd_party_urls")),(0,r.kt)("p",null,"Runs when a term gets purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $termId The ID of the term being purged cache for.\n * @param object $purgeObjectType An instance of Servebolt\\Optimizer\\CachePurge\\PurgeObject\\ObjectTypes\\Term.\n */\nfunction action_callback( $termId, $purgeObjectType ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_term_cache_purge_3rd_party_urls', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_term_cache_purge_3rd_party_urls_taxonomy_{taxonomy}")),(0,r.kt)("p",null,"Runs when a term in a specific taxonomy gets purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $termId The ID of the term being purged cache for.\n * @param object $purgeObjectType An instance of Servebolt\\Optimizer\\CachePurge\\PurgeObject\\ObjectTypes\\Term.\n */\nfunction action_callback( $termId, $purgeObjectType ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_term_cache_purge_3rd_party_urls_taxonomy_{taxonomy}', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_purged_term_cache")),(0,r.kt)("p",null,"Runs right before cache is being purged for a term."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int|string $termId The ID of the term being purged cache for.\n * @param bool $isSimplePurge If true then only the URL of the term is being purged, not other related URLs (archive pages etc.)\n */\nfunction action_callback( $termId, $isSimplePurge ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_purged_term_cache', 'action_callback', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_purged_term_cache_for_{termId}")),(0,r.kt)("p",null,"Runs right before cache is being purged for a term."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $isSimplePurge If true then only the URL of the term is being purged, not other related URLs (archive pages etc.)\n */\nfunction action_callback( $isSimplePurge ) {\n    // Do something\n}\nadd_action( 'sb_optimizer_purged_term_cache{termId}', 'action_callback', 10, 2 );\n")),(0,r.kt)("h3",{id:"filters"},"Filters"),(0,r.kt)("p",null,"Under you will find a full list of all available filters in the plugin and briefly how they will affect the behavior:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_block_editor_plugin_menu")),(0,r.kt)("p",null,"Whether to display the plugin menu in the Block Editor."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_block_editor_plugin_menu', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_row_action_post_types")),(0,r.kt)("p",null,"The post types to add cache purge row actions for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $post_types\n */\nfunction filter_function_name( $post_types ) {\n    // array of post types where the purge cache action will show\n    return $post_types;\n}\nadd_filter( 'sb_optimizer_cache_purge_row_action_post_types', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_row_action_post_types_query")),(0,r.kt)("p",null,"The query used to resolve post types to add cache purge row actions for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $args\n */\nfunction filter_function_name( $args ) {\n    return $args;\n}\nadd_filter( 'sb_optimizer_cache_purge_row_action_post_types_query', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_row_action_taxonomies")),(0,r.kt)("p",null,"The taxonomies to add cache purge row actions for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $taxonomies\n */\nfunction filter_function_name( $taxonomies ) {\n    // array of taxonomies where the purge cache action will show\n    return $taxonomies;\n}\nadd_filter( 'sb_optimizer_cache_purge_row_action_taxonomies', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_row_action_taxonomies_query")),(0,r.kt)("p",null,"The query used to resolve taxonomies to add cache purge row actions for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $args\n */\nfunction filter_function_name( $args ) {\n    return $args;\n}\nadd_filter( 'sb_optimizer_cache_purge_row_action_taxonomies_query', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cloudflare_feature_compatibility")),(0,r.kt)("p",null,"Whether to add Cloudflare plugin compatibility. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cloudflare_feature_compatibility', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_send_apo_no_cache_headers")),(0,r.kt)("p",null,"Whether to send Cloudflare APO no-cache headers. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_send_apo_no_cache_headers', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_send_apo_cache_headers")),(0,r.kt)("p",null,"Whether to send Cloudflare APO cache headers. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_send_apo_cache_headers', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_jetpack_compatibility")),(0,r.kt)("p",null,"Whether to add Jetpack plugin compatibility. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_jetpack_compatibility', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_woocommerce_compatibility")),(0,r.kt)("p",null,"Whether to add WooCommerce plugin compatibility. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_woocommerce_compatibility', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_woocommerce_cache_purge_for_variations")),(0,r.kt)("p",null,"Whether we should purge cache for product variations in WooCommerce context."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_woocommerce_cache_purge_for_variations', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_woocommerce_instantpage_urls")),(0,r.kt)("p",null,"Whether to add ?ip=1 to cart and checkout urls to prevent prefetching of cart info. A false response will prevent it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_woocommerce_instantpage_urls', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_wp_rocket_compatibility")),(0,r.kt)("p",null,"Whether to add WP Rocket plugin compatibility. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_wp_rocket_compatibility', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_wp_rocket_compatibility_should_delete_cache_folders")),(0,r.kt)("p",null,"Whether Servebolt Optimizer should delete the cache folders originating from WP Rocket."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_wp_rocket_compatibility_should_delete_cache_folders', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_wp_rocket_compatibility_cache_folders")),(0,r.kt)("p",null,"Filter for the array of WP Rocket PHP constants that defines the path to their cache-related folders. Used when Servebolt Optimizer is disabling the cache feature in WP Rocket."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $array ) {\n    return $array;\n}\nadd_filter( 'sb_optimizer_wp_rocket_compatibility_cache_folders', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_yoast_seo_premium_compatibility")),(0,r.kt)("p",null,"Whether to add Yoast SEO Premium plugin compatibility. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_yoast_seo_premium_compatibility', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_yoast_seo_premium_redirect_url_format")),(0,r.kt)("p",null,"Filter to ensure that the URL format is correct whenever a Yoast Redirect is changed. Mostly this is to ensure that we're not trying to purge relative URLs, ensuring that the full URL is used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $url The URL with the correct format, using the full URL.\n * @param string $raw_url The raw URL. \n */\nfunction filter_function_name( $url, $raw_url ) {\n    return $url;\n}\nadd_filter( 'sb_optimizer_yoast_seo_premium_redirect_url_format', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fpc_send_sb_cache_headers")),(0,r.kt)("p",null,"Whether to print cache headers in the HTML cache feature. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether we should print cache headers.\n * @param string $context Can be either \"cache\" or \"no-cache\", meaning that the headers about to be printed indicates whether the page should be cached or not.\n */\nfunction filter_function_name( $boolean, $context ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_fpc_send_sb_cache_headers', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fullpage_cache_header_item")),(0,r.kt)("p",null,"Every header is run through this filter so they can be adapted at will."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $string the complete header item information.\n * \n * @return string\n */\nfunction filter_function_name( $string ) {\n    return $string;\n}\nadd_filter( 'sb_optimizer_fullpage_cache_header_item', 'filter_function_name', 10 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_html_cache_is_active")),(0,r.kt)("p",null,"Whether the HTML cache feature is active."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_html_cache_is_active', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_html_cache_should_debug_headers")),(0,r.kt)("p",null,"Whether to print debug headers related to the HTML caching (only for Servebolt-hosted sites)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_html_cache_should_debug_headers', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fpc_ecommerce_pages_no_cache_bool")),(0,r.kt)("p",null,"In HTML caching context, use this boolean to override whether the current request is to a eCommerce page that should not be cached."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine whether we are looking at a eCommerce page that should not be cached\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_fpc_ecommerce_pages_no_cache_bool', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_fpc_ecommerce_pages_cache_bool")),(0,r.kt)("p",null,"In HTML cache context, use this boolean to override whether the current request is to a eCommerce page that should be cached."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine whether we are looking at a eCommerce page that should be cached\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_fpc_ecommerce_pages_cache_bool', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_display_admin_bar_menu")),(0,r.kt)("p",null,"Whether to display the plugin admin bar menu item."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean, $wpAdminBar ) {\n    // Determine if we should display the our menu item in the WP admin bar\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_display_admin_bar_menu', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_display_control_panel_node")),(0,r.kt)("p",null,"Whether to display the Servebolt Control Panel node in the admin bar menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Servebolt Control Panel menu node in the WP admin bar.\n    // Default to true if hosted on Servebolt and current user has manage-options capibility\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_display_control_panel_node', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_cache_purge_can_purge_all")),(0,r.kt)("p",null,"Whether to display the Purge All Cache node in the admin bar menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Purge All Cache menu node in the WP admin bar.\n    // Default to true if caching has been enabled, and not on network admin screens.\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_cache_purge_can_purge_all', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_display_network_cache_purge_node")),(0,r.kt)("p",null,"Whether to display the Purge a URL node in the network admin bar menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Purge a URL in network admin menu node in the network WP admin bar.\n    // Default to true if caching has been enabled, is a multisite, and is on a network admin screen.\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_display_network_cache_purge_node', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_display_settings_node")),(0,r.kt)("p",null,"Whether to display the Settings node in admin bar menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Settings node in the network WP admin bar.\n    // Default to true if user has manage-options capability.\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_display_settings_node', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_display_error_log_node")),(0,r.kt)("p",null,"Whether to display the ErrorLog node in admin bar menu - Only shows when hosted at Servebolt"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the ErrorLog node in the WP admin bar.\n    // Default to true if user has manage-options capability. Will not show menu item if not currently hosted at Servebolt.\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_display_error_log_node', 'filter_function_name', 10 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_admin_bar_cache_purge_can_purge_url")),(0,r.kt)("p",null,"Whether to display the Purge a URL node in admin bar menu"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Purge a URL node in the WP admin bar.\n    // Default to true if user has edit_others_posts capability. \n    return $boolean;\n}\nadd_filter( 'sb_optimizer_admin_bar_cache_purge_can_purge_url', 'filter_function_name', 10 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_allow_admin_bar_cache_purge_for_post")),(0,r.kt)("p",null,"Whether to display the Purge [post type] cache node in admin bar menu for the currently viewed page or admin edit screen"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Purge {post} cache node in the WP admin bar.\n    // Defaults to true. \n    return $boolean;\n}\nadd_filter( 'sb_optimizer_allow_admin_bar_cache_purge_for_post', 'filter_function_name', 10 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_allow_admin_bar_cache_purge_for_term")),(0,r.kt)("p",null,"Whether to display the Purge [taxonomy type] cache node in admin bar menu for the currently edited taxonomy term"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the Purge {category} cache node in the WP admin bar.\n    // Defaults to true. \n    return $boolean;\n}\nadd_filter( 'sb_optimizer_allow_admin_bar_cache_purge_for_term', 'filter_function_name', 10 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_display_network_super_admin_menu")),(0,r.kt)("p",null,"Whether to display the network admin menu."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the network admiin menu\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_display_network_super_admin_menu', 'filter_function_name', 10, 1) ;\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_display_subsite_menu")),(0,r.kt)("p",null,"Whether to display the subsite admin menu (if multisite)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the admin menu on a subsite in a multisite network\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_display_subsite_menu', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_display_single_site_admin_menu")),(0,r.kt)("p",null,"Whether to display the admin menu on a single site. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    // Determine if we should display the admin menu\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_display_single_site_admin_menu', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_purge_item_list_limit")),(0,r.kt)("p",null,"The number of items to display in the cache purge list. ",(0,r.kt)("u",null,"Currently not in use"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $limit ) {\n    return 500; // Only display 500 items in the purge queue list\n}\nadd_filter( 'sb_optimizer_purge_item_list_limit', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_log_file_path")),(0,r.kt)("p",null,"The path of the log file \u2013 only available when hosted in Servebolt."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $log_file_path The path to the log file that should be read by our code and displayed in the WP Admin GUI.\n */\nfunction filter_function_name( $log_file_path ) {\n    return '/custom/path/to/logfile.log'; // Override the path to the log file to inspect\n}\nadd_filter( 'sb_optimizer_log_file_path', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_settings_form_validation_active")),(0,r.kt)("p",null,"Whether to use JavaScript-based validation when editing the Cache Purge configuration. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return false; // Disable JavaScript validation for Cache Purge configuration form\n}\nadd_filter( 'sb_optimizer_cache_purge_settings_form_validation_active', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_date_archive_active")),(0,r.kt)("p",null,"Whether to include date archive URLs when purging cache for a post/term. Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return false;\n}\nadd_filter( 'sb_optimizer_cache_purge_date_archive_active', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cache_purge_post_type_should_be_purged")),(0,r.kt)("p",null,"Whether this post type should be purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether this post type should be purged cache for.\n * @param string $postType The post type in question. \n */\nfunction filter_function_name( $boolean, $postType ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cache_purge_post_type_should_be_purged', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),"`sb_optimizer_cache_tags_fine_grain_control`",(0,r.kt)("p",null,"Runs just before generating the cache tags for either caching or purging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param $value|bool \n * @return $value|bool\n */\nfunction filter_callback( $value ) {\n    // leave as TRUE, or to not filter at all to use complex cache tags.\n\n    // return FALSE to use minimal cache tags. \n    return false;\n}\nadd_filter( 'sb_optimizer_cache_tags_fine_grain_control', 'filter_callback', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_has_access")),(0,r.kt)("p",null,"Whether you have access to Accelerated Domains Image Resize. Defaults to true. Note that you need to have access to Accelerated Domains for this feature to work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_has_access', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_prefetching_alternative_immediate_manifest_file_generation")),(0,r.kt)("p",null,"Whether to allow for immediately generating manifest files (alternative strategy). Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_prefetching_alternative_immediate_manifest_file_generation', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_generate_other_urls")),(0,r.kt)("p",null,"Whether to generate other URLs (archives, front page) when purging cache for a WP object. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return false; // When purging cache, don't purge other related URLs like archives etc.\n}\nadd_filter( 'sb_optimizer_should_generate_other_urls', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_alter_urls_for_cache_purge_object")),(0,r.kt)("p",null,"Use this filter to alter the URLs when purging cache."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $urls, $purge_item_id, $purge_item_type ) {\n    $urls[] = 'https://my-custom-purge.com/some-path/';\n    return $urls;\n}\nadd_filter( 'sb_optimizer_alter_urls_for_cache_purge_object', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_disable_automatic_purge")),(0,r.kt)("p",null,"Whether to disable the automatic cache purge feature (for example when saving a post etc.). Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_disable_automatic_purge', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_post_save")),(0,r.kt)("p",null,"Whether to purge cache automatically on post update. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_post_save', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_comment")),(0,r.kt)("p",null,"Whether to purge cache automatically on comment post. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_comment', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_comment_approval")),(0,r.kt)("p",null,"Whether to purge cache automatically on comment approval. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_comment_approval', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_published_comment_edited")),(0,r.kt)("p",null,"Whether to purge cache automatically on published comment edited. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_published_comment_edited', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_comment_trashed")),(0,r.kt)("p",null,"Whether to purge cache automatically on published comment sent to trash. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_comment_trashed', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_comment_untrashed")),(0,r.kt)("p",null,"Whether to purge cache automatically when approved comment is restored from trash. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_comment_untrashed', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),"`sb_optimizer_disable_automatic_purge_on_deletion`",(0,r.kt)("p",null,"Whether to disable automatic cache purging when a post/term is deleted. Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_disable_automatic_purge_on_deletion', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_term_save")),(0,r.kt)("p",null,"Whether to purge cache automatically on term update. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_term_save', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_term_delete")),(0,r.kt)("p",null,"Whether to purge cache automatically on term deletion. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_term_delete', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_attachment_delete")),(0,r.kt)("p",null,"Whether to purge cache automatically on attachment deletion. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_attachment_delete', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_post_delete")),(0,r.kt)("p",null,"Whether to purge cache automatically on post deletion. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_post_delete', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_post_trash")),(0,r.kt)("p",null,"Whether to purge cache automatically on post trash. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_post_trash', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_disable_automatic_purge_on_slug_change")),(0,r.kt)("p",null,"Whether to disable automatic cache purging on slug change (both for posts and terms). Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_disable_automatic_purge_on_slug_change', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_term_permalink_change")),(0,r.kt)("p",null,"Whether to purge cache automatically on term permalink change. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_term_permalink_change', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_automatic_purge_on_post_permalink_change")),(0,r.kt)("p",null,"Whether to purge cache automatically on post permalink change. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_automatic_purge_on_post_permalink_change', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_purge_term_cache")),(0,r.kt)("p",null,"Use this filter to override the check that decides whether we should purge term cache or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean, $term_id, $taxonomy ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_should_purge_term_cache', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_purge_post_cache")),(0,r.kt)("p",null,"Use this filter to override the check that decides whether we should purge post cache or not."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean, $post_id ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_should_purge_post_cache', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_prevent_cache_purge_on_unapproved_comments")),(0,r.kt)("p",null,"Whether we should purge cache on unapproved comment post. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_prevent_cache_purge_on_unapproved_comments', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_comment_approved_cache_purge")),(0,r.kt)("p",null,"Whether a comment is considered as approved on comment post in the context of our automatic cache purge."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean, $comment_data, $comment_id, $post_id ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_comment_approved_cache_purge', 'filter_function_name', 10, 4 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_alter_srcset")),(0,r.kt)("p",null,"Whether to alter the srcset-attribute when using the Cloudflare image resize feature. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_alter_srcset', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_alter_src")),(0,r.kt)("p",null,"Whether to alter the src-attribute when using the Cloudflare image resize feature. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_alter_src', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_alter_intermediate_sizes")),(0,r.kt)("p",null,"Whether to affect the generation of image sizes when uploading an image. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_alter_intermediate_sizes', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_image_resize_always_create_sizes")),(0,r.kt)("p",null,"When generating images and using the Cloudflare/Accelerated Domains image resize feature, then use this filter to decide which image sizes that should always be created files for (meaning WordPress actually creates files on disk for the image size)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $sizes\n */\nfunction filter_function_name( $sizes ) {\n    // Make changes to $sizes\n    return $sizes;\n}\nadd_filter( 'sb_optimizer_image_resize_always_create_sizes', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_max_width")),(0,r.kt)("p",null,"Cloudflare image resize max width. Defaults to 1920."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int $maxWidth\n */\nfunction filter_function_name( $maxWidth ) {\n    return $maxWidth; // Override max width for Cloudflare image resize\n}\nadd_filter( 'sb_optimizer_cf_image_resize_max_width', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_max_height")),(0,r.kt)("p",null,"Cloudflare image resize max height. Defaults to 1080."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int $maxHeight\n */\nfunction filter_function_name( $maxHeight ) {\n    return $maxHeight; // Override max height for Cloudflare image resize\n}\nadd_filter( 'sb_optimizer_cf_image_resize_max_height', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_url")),(0,r.kt)("p",null,"The image URL after modification when using the Cloudflare image resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $url, $original_url, $cdi_uri, $cf_params, $cf_parameter_string ) {\n    // Do something with $url\n    return $url;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_url', 'filter_function_name', 10, 5 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_default_params_additional")),(0,r.kt)("p",null,"The additional URL parameters (before arguments are merged with default arguments) used when modifying the URL to use Cloudflare image resize."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $parameters ) {\n    // Do something with $parameters\n    return $parameters;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_default_params_additional', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_default_params")),(0,r.kt)("p",null,"The default URL parameters (before arguments are merged with additional arguments) used when modifying the URL to use Cloudflare image resize."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $parameters ) {\n    // Do something with $parameters\n    return $parameters;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_default_params', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_image_resize_default_params_concatenated")),(0,r.kt)("p",null,"The URL parameters (after arguments are merged with default arguments) used when modifying the URL to use Cloudflare image resize."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $parameters ) {\n    // Do something with $parameters\n    return $parameters;\n}\nadd_filter( 'sb_optimizer_cf_image_resize_default_params_concatenated', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_upscale_images")),(0,r.kt)("p",null,"Whether to use upscale the images when using the Cloudflare / Accelerated Domains image resize-feature. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_upscale_images', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_image_resize_upscale_dimensions")),(0,r.kt)("p",null,"When using the Cloudflare / Accelerated Domains image resize feature \u2013 use this filter to adjust the upscale dimensions of the image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $dimensions An array containing the dimensions or the image to potentially be upscaled.\n */\nfunction filter_function_name( $dimensions ) {\n    // Do something with $dimensions\n    return $dimensions;\n}\nadd_filter( 'sb_optimizer_image_resize_upscale_dimensions', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_purge_cache_queue")),(0,r.kt)("p",null,"Whether the system should parse the cache purge queue and execute the cache purge. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_should_purge_cache_queue', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_cf_api_request_debug")),(0,r.kt)("p",null,"Whether to debug the request to the Cloudflare API. Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_cf_api_request_debug', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_max_number_of_urls_to_be_purged")),(0,r.kt)("p",null,"Limit the number of URLs being sent for purging in the Cloudflare API/the Servebolt API (depends on which driver is active). This is due to limitations in the API \u2013 maximum 30 URLs per purge request. Using this filter is recommended, but it will prevent an error until a better solution is implemented."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int $max_number The maximum number of URLs that should be purged during a request to the API (either Cloudflare of the Servebolt API).\n * @param string $context The context of the cache purge, can be either \"post\" or \"term\".\n * @param object $cache_purge_driver The instance of the cache purge driver.\n */\nfunction filter_function_name( $max_number, $context, $cache_purge_driver ) {\n    return 30; // Set an upper limit for the number of URLs when purging cache \n}\nadd_filter( 'sb_optimizer_max_number_of_urls_to_be_purged', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_urls_to_be_purged")),(0,r.kt)("p",null,"The array of URLs to be purged cache for."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $urls An array of URLs to be purged.\n */\nfunction filter_function_name( $urls ) {\n    // Do something with $urls\n    return $urls;\n}\nadd_filter( 'sb_optimizer_urls_to_be_purged', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_menu_optimizer_run_timing")),(0,r.kt)("p",null,"Whether to run the timing metrics during in the Menu Optimizer feature. Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_menu_optimizer_run_timing', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_menu_optimizer_disabled_for_unauthenticated_users")),(0,r.kt)("p",null,"Whether the Menu Optimizer feature should be disabled for unauthenticated users. Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_menu_optimizer_disabled_for_unauthenticated_users', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_menu_optimizer_print_cached_comment")),(0,r.kt)("p",null,"Whether the Menu Optimizer should print a comment in the markup that will indicate whether the menu output came from cache or not. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_menu_optimizer_print_cached_comment', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_mcrypt_key")),(0,r.kt)("p",null,"The mcrypt key/secret used to store options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $key ) {\n    return 'custom-key'; // Use custom encryption key for Mcrypt\n}\nadd_filter( 'sb_optimizer_mcrypt_key', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_openssl_keys")),(0,r.kt)("p",null,"The OpenSSL key/secret used to store/get options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $keys An array containing OpenSSL secret key and IV.\n */\nfunction filter_function_name( $keys ) {\n    // Do something with $keys\n    return $keys;\n}\nadd_filter( 'sb_optimizer_openssl_keys', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_pluggable_check")),(0,r.kt)("p",null,"The OpenSSL key/secret used to store/get options."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $defaultValue = false\n * @return bool return true to force additonal check that pluggable is loaded. \n */\nfunction filter_function_name( $defaultValue ) {    \n    return true;\n}\nadd_filter( 'sb_optimizer_pluggable_check', 'filter_function_name' );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_get_option_(option_name)")),(0,r.kt)("p",null,"Filter for value of option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param mixed $value The option value. \n */\nfunction filter_function_name( $value ) {\n    return 'custom-option-value';\n}\nadd_filter( 'sb_optimizer_get_option_{option_name}', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_get_blog_option_(option_name)")),(0,r.kt)("p",null,"Filter for value of blog option."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param mixed $value The blog option value. \n */\nfunction filter_function_name( $value ) {\n    return 'custom-blog-option-value';\n}\nadd_filter( 'sb_optimizer_get_blog_option_{option_name}', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_paginate_links_as_array_args")),(0,r.kt)("p",null,"The arguments passed to the function \u201cpaginate_links\u201d when generating pagination links in the context of the cache purge-feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $args ) {\n    return $args;\n}\nadd_filter( 'sb_paginate_links_as_array_args', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_skip_generic_optimizations")),(0,r.kt)("p",null,"Whether to apply the generic optimizations (primarily trimming the contents in the head-tag as well as preventing script concatenation which is default behaviour in Wordpress). Defaults to false."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_skip_generic_optimizations', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_ajax_user_allowed")),(0,r.kt)("p",null,"Used to control the allowance (user capabilities) to send AJAX request to the AJAX endpoints of this plugin."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $user_allowed ) {\n    if ( ! current_user_can('my_custom_capability') ) {\n        return false;\n    }\n    return $user_allowed;\n}\nadd_filter( 'sb_optimizer_ajax_user_allowed', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_site_iteration")),(0,r.kt)("p",null,"This filter is used when executing a closure for each blog in a multisite-network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $sites ) {\n    // Do something with $sites\n    return $sites;\n}\nadd_filter( 'sb_optimizer_site_iteration', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_version_parameter_to_asset_src")),(0,r.kt)("p",null,"Whether to add version parameter to assets URLs. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_version_parameter_to_asset_src', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_version_parameter_name")),(0,r.kt)("p",null,"The string used to create the version parameter for asset URLs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $parameter_name The name of the parameter being used in the asset URL.\n * @param string $file_path The path of the asset file. \n */\nfunction filter_function_name( $parameter_name, $file_path ) {\n    return $parameter_name;\n}\nadd_filter( 'sb_optimizer_version_parameter_name', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_version_parameter_value")),(0,r.kt)("p",null,"The string used to create the version parameter for asset URLs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $parameter_value The value of the parameter being used in the asset URL.\n * @param string $parameter_name The name of the parameter being used in the asset URL.\n * @param string $file_path The path of the asset file. \n */\nfunction filter_function_name( $parameter_value, $parameter_name, $file_path ) {\n    return $parameter_value;\n}\nadd_filter( 'sb_optimizer_version_parameter_value', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_asset_base_path")),(0,r.kt)("p",null,"The base path used when converting an asset URL to asset path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $base_path The base path to your WP install as resolved by WordPress.\n * @param string $src The URL of the asset in question.\n * @param array $parsed_url The URL represented as an array using PHP-function \"parse_url\".\n */\nfunction filter_function_name( $base_path, $src, $parsed_url ) {\n    return $base_path;\n}\nadd_filter( 'sb_optimizer_asset_base_path', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_asset_parsed_url_path")),(0,r.kt)("p",null,"The URL path used when converting an asset URL to asset path."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $src ) {\n    return $src;\n}\nadd_filter( 'sb_optimizer_asset_parsed_url_path', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_version_parameter_to_script_src")),(0,r.kt)("p",null,"Whether to add version parameter to asset script URLs. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_version_parameter_to_script_src', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_version_parameter_to_style_src")),(0,r.kt)("p",null,"Whether to add version parameter to asset style URLs. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_version_parameter_to_style_src', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_version_parameter_to_script_src_{handle}")),(0,r.kt)("p",null,"Whether to add version parameter to the asset script URL for a certain handle. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_version_parameter_to_script_src_{handle}', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_add_version_parameter_to_style_src_{handle}")),(0,r.kt)("p",null,"Whether to add version parameter to the asset style URL for a certain handle. Defaults to true."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_add_version_parameter_to_style_src_{handle}', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_asset_url_to_path_conversion")),(0,r.kt)("p",null,"The converted path of an asset URL."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $path The resolved path of an assets URL.\n * @param array $parsed_url The asset URL represented as an array using PHP-function \"parse_url\".\n */\nfunction filter_function_name( $path, $parsed_url ) {\n    return $path;\n}\nadd_filter( 'sb_optimizer_asset_url_to_path_conversion', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_asset_url_to_path_conversion_(handle)")),(0,r.kt)("p",null,"The converted path of an asset URL for a certain handle."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $path The resolved path of an assets URL.\n * @param array $parsed_url The asset URL represented as an array using PHP-function \"parse_url\".\n */\nfunction filter_function_name( $path, $parsed_url ) {\n    return $path;\n}\nadd_filter( 'sb_optimizer_asset_url_to_path_conversion_{handle}', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_init_assets")),(0,r.kt)("p",null,"Whether to initiate the assets of Servebolt Optimizer. Defaults to true if the user is logged in, false if otherwise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_should_init_assets', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_should_load_common_assets")),(0,r.kt)("p",null,"Whether to load the common assets (scripts and styling)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to load the common assets. \n * @param string $type Which asset type we are considering, will be either \"styling\" or \"scripts\".\n */\nfunction filter_function_name( $boolean, $type ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_should_load_common_assets', 'filter_function_name', 10, 2 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_generic_optimizations_concatenate_scripts_disable")),(0,r.kt)("p",null,'Whether to concatenate script files using WordPress constant "CONCATENATE_SCRIPTS". Note that if the constant is already set elsewhere this will not have any effect. Also note that if the filter `sb_optimizer_should_load_common_assets` is set to false then this will override this filter.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_generic_optimizations_concatenate_scripts_disable', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_generic_optimizations_disable_meta_tag_generator")),(0,r.kt)("p",null,"Whether to disable the meta tag generator in the header-tag on the webpage. Also note that if the filter `sb_optimizer_should_load_common_assets` is set to false then this will override this filter."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"function filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_generic_optimizations_disable_meta_tag_generator', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_force_add_height")),(0,r.kt)("p",null,"Whether to set the image height during image resize regardless of the max height. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to set height parameter. \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_force_add_height', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_additional_params")),(0,r.kt)("p",null,"This array is being built into the resize parameters for the image resize feature. Contains the initial information about height and/or width. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $additional_params An array containing additional parameters, usually width and height. If the image is not cropped then either width or height will be specified, using the highest value.\n */\nfunction filter_function_name( $additional_params ) {\n    return $additional_params;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_additional_params', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_default_params")),(0,r.kt)("p",null,"This array is used as default when building the parameter array for the image resize URL. Will be merged with the additional parameters (see the previous filter). Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $default_params An array containing the default parameters for image resizing. This would typically be image quality and other settings related to the resize procedure.\n */\nfunction filter_function_name( $default_params ) {\n    return $default_params;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_default_params', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_params_concatenated")),(0,r.kt)("p",null,"This array is used to build the parameters for the image resize URL. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param array $params An array containing all parameters used during the image resize procedure.\n */\nfunction filter_function_name( $params ) {\n    return $params;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_params_concatenated', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_max_width")),(0,r.kt)("p",null,"The maximum allowed width of images in the image resize feature. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int $maxWidth The maximum width in pixels an image should be during the image resize procedure.\n */\nfunction filter_function_name( $maxWidth ) {\n    return $maxWidth;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_max_width', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_max_height")),(0,r.kt)("p",null,"The maximum allowed height of images in the image resize feature. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param int $maxHeight The maximum height in pixels an image should be during the image resize procedure.\n */\nfunction filter_function_name( $maxHeight ) {\n    return $maxHeight;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_max_height', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_cgi_prefix")),(0,r.kt)("p",null,"Used to alter the CGI prefix that is used when generating the resized image URL. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $full_url_prefix The full prefix including version.\n * @param string $prefix The CGI prefix that is used when generate resized image URL.\n * @param string $version The version of the image resize service, currently v1.\n */\nfunction filter_function_name( $full_url_prefix, $cgiPrefix, $version ) {\n    return $prefix;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_cgi_prefix', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_url")),(0,r.kt)("p",null,"Filters the altered URL for the image to be resized."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param string $altered_url The altered URL (causing the image to be resized).\n * @param string $url The original URL.\n * @param array $url_parts\n * @param string $path_prefix\n * @param array $resize_parameters\n * @param string $resize_parameters_string\n */\nfunction filter_function_name( $altered_url, $url, $url_parts, $path_prefix, $resize_parameters, $resize_parameters_string ) {\n    return $alteredUrl;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_url', 'filter_function_name', 10, 6 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_should_touch")),(0,r.kt)("p",null,"In a image resize context you can use this filter to exclude/include certain image types. By default SVG images will be excluded from the image resize feature. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to touch image or not.\n * @param string $mime_type The MIME type of the attachment.\n * @param int|string $attachment_id The ID of the attachment. \n */\nfunction filter_function_name( $boolean, $mime_type, $attachment_id ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_should_touch', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_should_touch_svg")),(0,r.kt)("p",null,"In an image resize context you can use this filter to exclude/include SVG images. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to touch image or not.\n * @param string $mime_type The MIME type of the attachment.\n * @param int|string $attachment_id The ID of the attachment. \n */\nfunction filter_function_name( $boolean, $mime_type, $attachment_id ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_should_touch_svg', 'filter_function_name', 10, 3 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_should_touch_by_file_extension")),(0,r.kt)("p",null,"In an image resize context you can use this filter to exclude/include certain image types. By default SVG images will be excluded from the image resize feature. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to touch image or not.\n * @param string $file_extension The file extension of the attachment.\n * @param string $mime_type The MIME type of the attachment.\n * @param int|string $attachment_id The ID of the attachment. \n */\nfunction filter_function_name( $boolean, $file_extension, $mime_type, $attachment_id ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_should_touch_by_file_extension', 'filter_function_name', 10, 4 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_alter_src")),(0,r.kt)("p",null,"Whether to resize the image URL used in the src-attribute of an image. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to alter the URL of the src-attribute. \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_alter_src', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_alter_srcset")),(0,r.kt)("p",null,"Whether to resize the image URLs used in the srcset-attribute of an image. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to alter the URLs of the srcset-attribute. \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_alter_srcset', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_alter_intermediate_sizes")),(0,r.kt)("p",null,"Whether we should prevent some image sized from being resized by our feature. See the class `ImageSizeCreationOverride` for more info. Affects the Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to prevent certain image sizes from being resized by our feature.  \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_alter_intermediate_sizes', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_image_resize_add_half_sizes")),(0,r.kt)("p",null,"Whether to add half sizes of the existing sizes to the srcset-attributes, giving the browser more image sizes to chose from when evaluating the viewport size against the images in the srcset-attribute. Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to add half sizes of existing sizes in the srcset-attribute.\n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_image_resize_add_half_sizes', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_add_custom_sizes_to_srcset")),(0,r.kt)("p",null,"Whether to add custom sizes to the srcset-attribute. These sizes can be controlled via WP CLI, see command `wp servebolt acd image-sizes`. Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to add custom sizes to the srcset-attribute. \n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_add_custom_sizes_to_srcset', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_limit_srcset_width_to_image_width")),(0,r.kt)("p",null,"Whether to limit the width of the images in the srcset-attribute to the width of the image in the src-attribute. Defaults to true. This feature is handy when you have added huge custom image sizes for example. Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to contain the width of the images in the srcset-attribute to the width of the image in the src-attribute.\n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_limit_srcset_width_to_image_width', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_limit_srcset_width_to_image_width")),(0,r.kt)("p",null,"Whether to limit the width of the custom image sizes in the srcset-attribute to the width of the image in the src-attribute. Defaults to true. This feature is handy when you have added huge custom image sizes for example. Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to contain the width of the custom image sizes in the srcset-attribute to the width of the image in the src-attribute.\n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_limit_srcset_width_to_image_width', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sb_optimizer_acd_limit_all_srcset_width_to_image_width")),(0,r.kt)("p",null,"Whether to limit the width of the all the images in the srcset-attribute to the width of the image in the src-attribute. Defaults to true. This feature is handy when you have added huge custom image sizes for example. Accelerated Domain Image Resize feature."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-php"},"/**\n * @param bool $boolean Whether to contain the width of all the images in the srcset-attribute to the width of the image in the src-attribute.\n */\nfunction filter_function_name( $boolean ) {\n    return $boolean;\n}\nadd_filter( 'sb_optimizer_acd_limit_all_srcset_width_to_image_width', 'filter_function_name', 10, 1 );\n")),(0,r.kt)("hr",null))}s.isMDXComponent=!0}}]);