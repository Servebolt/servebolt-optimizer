"use strict";(self.webpackChunkwpplugin_docs_servebolt_com=self.webpackChunkwpplugin_docs_servebolt_com||[]).push([[566],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(r),g=o,d=h["".concat(l,".").concat(g)]||h[g]||p[g]||a;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},9655:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(3117),o=(r(7294),r(3905));const a={},i="Developer guide to Caching and Purging",s={unversionedId:"developer-guide-to-caching-and-purging",id:"developer-guide-to-caching-and-purging",title:"Developer guide to Caching and Purging",description:"There are essentially 4 places to look",source:"@site/docs/developer-guide-to-caching-and-purging.md",sourceDirName:".",slug:"/developer-guide-to-caching-and-purging",permalink:"/docs/developer-guide-to-caching-and-purging",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"WP CLI commands",permalink:"/docs/cli-commands"},next:{title:"Environment files",permalink:"/docs/environment-file"}},l={},c=[{value:"How it works",id:"how-it-works",level:2}],u={toc:c};function p(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"developer-guide-to-caching-and-purging"},"Developer guide to Caching and Purging"),(0,o.kt)("p",null,"There are essentially 4 places to look"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"CachePurge ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Servebolt/servebolt-optimizer/tree/master/src/Servebolt/CachePurge"},"see section in github")," Where it knows how to purge, what types of purge are possible, if things should be queued for purging. ")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Drivers: The drivers that are possible to be used ","[Cloudflare, Servebolt, ServeboltCDN]",", they implement the interfaces."),(0,o.kt)("li",{parentName:"ul"},"Interfaces: The different functions each interface can do, ie. purgeAll(), purgeTerm() "),(0,o.kt)("li",{parentName:"ul"},"PurgeObject: The different types of purge object that can be created ","[post, cachetag,term]",". "),(0,o.kt)("li",{parentName:"ul"},"WordPressCachePurge: The different ways its performs the Purge, with a manager class"),(0,o.kt)("li",{parentName:"ul"},"WpObjectCachePurgeActions: Where actions are configured, for example on \u201cpost_save\u201d perform a purge event.  ")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"CacheTags ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Servebolt/servebolt-optimizer/tree/master/src/Servebolt/CacheTags"},"see section in github")," are setup here. This does not do any purging its self, it just checks if its suitable to add cache tags to a site, and when purging checks if cache tags can be used there also, and resolve what ones to use."),(0,o.kt)("li",{parentName:"ol"},"FullPageCache ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Servebolt/servebolt-optimizer/tree/master/src/Servebolt/FullPageCache"},"see section in github")," Where it defined headers or anything else to do with cache timeouts. "),(0,o.kt)("li",{parentName:"ol"},"Queue ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Servebolt/servebolt-optimizer/tree/master/src/Servebolt/Queue"},"see section in github")," optional queuing of purge events that are worked on every Cron event, usually every minute on a busy, crontab dependent. The queue saved \u201cstubs\u201d that it works on when it gets to it.  The stub is a reference to what is going to be pruged, it is only when it is works on finding actual urls or cach tags will be purged in relation to the stub. ")),(0,o.kt)("h2",{id:"how-it-works"},"How it works"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"There is a requirement to perform a CRUD, that requires a purge"),(0,o.kt)("li",{parentName:"ol"},"The system works out via that request if it should be a Post, CacheTag or a Term purge"),(0,o.kt)("li",{parentName:"ol"},"It loads the CachePurge/PurgeObject/ObjectTypes needed"),(0,o.kt)("li",{parentName:"ol"},"For Post it uses CachePurge/WordPressCachePurge/PostMethods.php, for Terms TermMethods.php"),(0,o.kt)("li",{parentName:"ol"},"If the loaded ObjectType is not CacheTags, it purges by url for each possible url related to the post or term.  If it is using cacheTags it generates the headers that way\nexample see purgePostCache() and purgeTermCache(). There are lots of other methods that perform the wordpress cache purge from these two files. "),(0,o.kt)("li",{parentName:"ol"},"It then loads the correct Cache Driver for the setup, and checks what type of purge events are open to it via an Interface implementation. It then tries to run the wanted method purge the cache via either the Servebolt API or direct with Cloudflare. "),(0,o.kt)("li",{parentName:"ol"},"Then via the correct route for the API endpoint wanted it makes a call to these API\u2019s via the Servebolt PHP-SDK")),(0,o.kt)("p",null,"If the queue is turned on it puts a stub in the queue at Step #1. Which it then reads when it gets to in in the queue, and then starts Step #2"))}p.isMDXComponent=!0}}]);