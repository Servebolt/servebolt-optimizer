<?php

namespace Unix\CronControl;

use Servebolt\Optimizer\CronControl\Commands\WpCliEventRun;
use Servebolt\Optimizer\CronControl\UnixCronModel;
use Unit\Traits\EnvFile\EnvFileReaderTrait;
use WP_UnitTestCase;

class UnixCronModelTest extends WP_UnitTestCase
{
    use EnvFileReaderTrait;

    private $intervalRegexPattern = '/^(([0-5]?[0-9]),){11}([0-5]?[0-9]) \* \* \* \*$/';

    public function testThatWeCanResolve()
    {
        $this->assertInstanceOf(WpCliEventRun::class, UnixCronModel::ensureCommandInstance(WpCliEventRun::class));
        $instance = new WpCliEventRun;
        $this->assertEquals($instance, UnixCronModel::ensureCommandInstance($instance));
        $this->assertFalse(UnixCronModel::ensureCommandInstance([]));
    }

    public function testThatWeCanGenerateCronJobData()
    {
        self::getEnvFileReader();
        $wpPath = '/path/to/wp/';
        add_filter('sb_optimizer_env_file_reader_get_public_dir', function() use ($wpPath) {
            return $wpPath;
        });
        $data = UnixCronModel::buildCronJobDataFromCommand(new WpCliEventRun);
        $this->assertEquals(1, $data['attributes']['active']);
        $this->assertEquals('flock -n ~/.wp_cron.lock wp cron event run --due-now --path=/path/to/wp/ --quiet', $data['attributes']['command']);
        $this->assertEquals('Generated by Servebolt Optimizer (name=wp-cron-single-site,rev=1)', $data['attributes']['comment']);
        $this->assertRegExp($this->intervalRegexPattern, $data['attributes']['schedule']);
        //$this->assertEquals('none', $data['attributes']['notifications']);
        $this->assertEquals('all', $data['attributes']['notifications']);
        remove_all_filters('sb_optimizer_env_file_reader_get_public_dir');
    }
}
